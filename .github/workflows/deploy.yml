name: Build and Deploy Muza Metadata Server

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY_API: muza/metadata-api
  ECR_REPOSITORY_ADMIN: muza/admin-ui
  CONTAINER_NAME_API: metadata-api
  CONTAINER_NAME_ADMIN: admin-ui

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    # Set environment based on branch or manual input
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || (github.ref == 'refs/heads/develop' && 'staging' || 'staging')) }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push API image to Amazon ECR
        id: build-api-image
        run: |
          # Generate image tag using GitHub SHA only
          IMAGE_TAG="${{ github.sha }}"
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          API_IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG"

          echo "🏗️ Building API image: $API_IMAGE_URI"

          # Build the main API Docker image
          docker build -f Containerfile -t $API_IMAGE_URI .

          # Push the image with SHA tag only
          docker push $API_IMAGE_URI

          echo "api-image=$API_IMAGE_URI" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push Admin UI image to Amazon ECR
        id: build-admin-image
        run: |
          # Use same image tag for consistency
          IMAGE_TAG="${{ steps.build-api-image.outputs.image-tag }}"
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          ADMIN_IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY_ADMIN:$IMAGE_TAG"

          echo "🏗️ Building Admin UI image: $ADMIN_IMAGE_URI"

          # Build the admin UI Docker image
          docker build -f Containerfile.admin-ui -t $ADMIN_IMAGE_URI .

          # Push the image with SHA tag only
          docker push $ADMIN_IMAGE_URI

          echo "admin-image=$ADMIN_IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Get current API task definition
        run: >
          aws ecs describe-task-definition
          --task-definition "$ECS_SERVICE_API" --region "$AWS_REGION" --query 'taskDefinition'
          > api-task-definition.json

      - name: Fill in the new API image ID in the Amazon ECS task definition
        id: task-def-api
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: api-task-definition.json
          container-name: ${{ env.CONTAINER_NAME_API }}
          image: ${{ steps.build-api-image.outputs.api-image }}

      - name: Deploy API Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-api.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_API }}
          cluster: ${{ vars.ECS_CLUSTER }}

      - name: Get current Admin UI task definition
        run: >
          aws ecs describe-task-definition
          --task-definition "$ECS_SERVICE_ADMIN" --region "$AWS_REGION" --query 'taskDefinition'
          > admin-task-definition.json

      - name: Fill in the new Admin UI image ID in the Amazon ECS task definition
        id: task-def-admin
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: admin-task-definition.json
          container-name: ${{ env.CONTAINER_NAME_ADMIN }}
          image: ${{ steps.build-admin-image.outputs.admin-image }}

      - name: Deploy Admin UI Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-admin.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_ADMIN }}
          cluster: ${{ vars.ECS_CLUSTER }}

      - name: Wait for deployments to complete
        run: |
          echo "⏳ Waiting for API deployment to complete..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_API \
            --max-attempts 30 \
            --delay 30

          echo "✅ API deployment completed!"

          echo "⏳ Waiting for Admin UI deployment to complete..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_ADMIN \
            --max-attempts 30 \
            --delay 30

          echo "✅ All deployments completed successfully!"

      - name: Get services status
        run: |
          echo "📊 API Service Status:"
          API_STATUS=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_API \
            --query 'services[0].deployments[0]' \
            --output table)
          echo "$API_STATUS"

          echo ""
          echo "📊 Admin UI Service Status:"
          ADMIN_STATUS=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_ADMIN \
            --query 'services[0].deployments[0]' \
            --output table)
          echo "$ADMIN_STATUS"

      - name: Output deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || (github.ref == 'refs/heads/develop' && 'staging' || 'staging')) }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Cluster:** \`$ECS_CLUSTER\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** \`${{ steps.build-api-image.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 API Service" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** \`$ECS_SERVICE_API\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`${{ steps.build-api-image.outputs.api-image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Port:** 8000 (via ALB)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔐 Admin UI Service" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** \`$ECS_SERVICE_ADMIN\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`${{ steps.build-admin-image.outputs.admin-image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Port:** 5002 (VPN-only direct access)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Both services deployed successfully" >> $GITHUB_STEP_SUMMARY
